<?

/**
 * Implementation of hook_menu()
 */
function grabbit_tags_menu() {

  $items['tags/display'] = array( 
    'page callback' => 'grabbit_tags_display', 
    'access arguments' => array('access content')
  );

  $items['tags/save'] = array( 
    'page callback' => 'grabbit_tags_save', 
    'access arguments' => array('access content')
  );

  $items['tags/profile/save'] = array( 
    'page callback' => 'grabbit_tags_profile_save', 
    'access arguments' => array('access content')
  );
 
  $items['tags/profile/one'] = array( 
    'page callback' => 'grabbit_tags_profile_save_one', 
    'access arguments' => array('access content')
  );

  $items['tags/delete'] = array( 
    'page callback' => 'grabbit_tags_delete', 
    'access arguments' => array('access content')
  );

  return $items;
}

function grabbit_tags_display(){
	
	$nid=$_GET['nid'];
	$type=$_GET['type'];
	
	$node=node_load($nid);
	
	if(is_array($node->tags)){
	  	foreach($node->tags as  $tag_group){
			foreach($tag_group as $tag){
			  $text[]=$tag->name;	
			}
		}	
	}

    if($node->nid){
	  if(!count($text)){
	    if($node->type=='twitter' || $node->type=='facebook'){
		  $input ='<div class="no-tags">There are no tags in this item, you can add tags using the form below</div>';
	    } 	
	  }
	  $output = '<div class="tags-engine" node="'.$nid.'">
	             '.$input.'
	             <a href="#" class="close-tags">Close</a><span class="all-tags">';
   
	  $output .='<textarea id="text-area-'.$nid.'">'.implode(', ',$text).'</textarea>
	             <button type="button" class="tags-submit">Save</button>
				 <button type="button" class="tags-cancel">Cancel</button>';
	
	  $output .= '</span><span class="tags-to-profile"><button type="tags-submit-profile">Save to Profile</button></span></div>';
	  
	  print $output;
    }else{
	  print "OT";
    }
	
	
}

function grabbit_tags_save(){
	
	$nid=$_GET['nid'];
	
	if($_GET['tags']){
	
		$terms=$_GET['tags'];
		$node=node_load($nid);
		$node->taxonomy=array();
		if (isset($terms)) {
           $node->taxonomy['tags'][3]=$terms;
        }

        taxonomy_node_save($node, $node->taxonomy);

	    print "OK";	// Everything went smooth

	}else{
		print "OT"; // No terms sent, so we return a no terms message to handle
	}	
}

function grabbit_tags_profile_save(){
	
	$nid=$_GET['nid'];
	
	if($nid){
		
	  $node = node_load($nid);
      global $user;

      $profile = content_profile_load('profile', $user->uid);
      if(!$profile->nid){
		$profile = new StdClass();
		$profile->type = 'profile';
		$profile->uid=$user->uid;
		$profile->title=$user->name;
		node_save($profile);
	  }
	  foreach($node->tags[3] as $tag){
        $profile->taxonomy[$tag->tid]=$tag;
      }

	  taxonomy_node_save($profile, $profile->taxonomy);
	  print "OK";
	
	}else{
	  print "OT";
	}
	
}

function grabbit_tags_profile_save_one(){
    $tag=$_GET['tag'];

    if(isset($tag)){
	  global $user;

      $profile = content_profile_load('profile', $user->uid);
      if(!$profile->nid){
		$profile = new StdClass();
		$profile->type = 'profile';
		$profile->uid=$user->uid;
		$profile->title=$user->name;
		node_save($profile);
	  }
	  $tag=trim($tag);
	// check if the term already exist
	  	$try=taxonomy_get_term_by_name($tag);
	
	    if($try){
		  if($try->tid){
		    $profile->taxonomy[$try->tid]=$try;
		  }elseif(count($try)){
		 	$profile->taxonomy[$try[0]->tid]=$try[0];
		  }		  
	    }else{
		  $profile->taxonomy['tags'][3]=$tag;
	    }
	// end check  
	  taxonomy_node_save($profile, $profile->taxonomy);
	  print "OK";
    }else{
	  print "OT";
    }
}

function grabbit_tags_delete(){

	$nid=$_GET['nid'];
	
	if($_GET['tag']){
	
		$term=$_GET['tag'];
		$node=node_load($nid);
		foreach($node->tags[3] as $tag){
		  if($tag->name!=$term){
		    $terms[]=$tag->name;	
		  }
		}
		$terms=implode(',',$terms);
		$node->taxonomy=array();
		$node->taxonomy['tags'][3]=$terms;
        
        taxonomy_node_save($node, $node->taxonomy);

	    print "OK";	// Everything went smooth

	}else{
		print "OT"; // No terms sent, so we return a no terms message to handle
	}
	
}