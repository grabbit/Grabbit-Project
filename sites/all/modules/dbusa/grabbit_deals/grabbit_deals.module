<?

/**
 * Implementation of hook_menu()
 */
function grabbit_deals_menu() {

  $items['deals/display'] = array( 
    'page callback' => 'grabbit_deals_display', 
    'access arguments' => array('access content')
  );
  
  $items['deals/calculate'] = array( 
    'page callback' => 'grabbit_deals_calculate', 
    'access arguments' => array('access content')
  );
  
  $items['deals/detail'] = array( 
    'page callback' => 'grabbit_deals_detail', 
    'access arguments' => array('access content')
  );

  $items['deals/open'] = array( 
    'page callback' => 'grabbit_deals_open_and_track', 
    'access arguments' => array('access content')
  );

  return $items;
}

// renders the page view of a specific deal
function grabbit_deals_detail()
{
  $asin = arg(2);
  
  require_once 'amazon/amazon_api_class.php';
  $api = new AmazonProductAPI();
  
  try
  {
    $result = $api->getItemByAsin($asin);
    $deal = $result->Items->Item;
  }
  catch (Exception $e)
  {
    drupal_goto('deals/invalid');
  }
  
  $listprice = (int)$deal->ItemAttributes->ListPrice->Amount;
  $offer = (int)$deal->OfferSummary->LowestNewPrice->Amount;
  
  $out = '
  <div class="deal-detail">
    <h1>Amazon Deal</h1>
    <div class="back">'.l('&laquo; <span>Back to stream</span>', '<front>', array('html' => true)).'</div>
    <div class="deal-container">
      <div class="group">'.$deal->ItemAttributes->ProductGroup.'</div>
      
      <div class="clearfix">
          
        <div class="image">
            <img src="'.$deal->LargeImage->URL.'" width="250"/>
            '.l('buy', $deal->DetailPageURL, array( 'attributes' => array('class' => 'buy', 'target' => '_blank'), 'absolute' => true )).'
            <div class="product-link">
              <strong>Or go to product page:</strong>'.l(substr($deal->DetailPageURL, 0, 60).'...', $deal->DetailPageURL, array( 'attributes' => array('target' => '_blank'), 'absolute' => true )).'
            </div>
        </div>
        <div class="info">
          <h2>'.$deal->ItemAttributes->Title.'</h2>
          <div class="asin">Product #: '.$asin.'</div>
          <div class="prices">
            <div class="list">List Price: '.$deal->ItemAttributes->ListPrice->CurrencyCode.' '.$deal->ItemAttributes->ListPrice->FormattedPrice.'</div>';
    if ( $listprice != $offer )
    {
      $out .= '<div class="lowest">Lowest New Price: <span>'.$deal->OfferSummary->LowestNewPrice->CurrencyCode.' '.$deal->OfferSummary->LowestNewPrice->FormattedPrice.'</span></div>'; 
    }
    $out .= '
            </div>
            <div class="description">'.$deal->EditorialReviews->EditorialReview->Content.'</div>
          </div>
        
      </div>
      <div class="from">From <span>Amazon.com</span></div>
    </div>
  </div>
    ';
    grabbit_statistics_save_deal_prog(base_path().'deals/open/'.$asin,$deal->ItemAttributes->ListPrice->FormattedPrice); // tracking statistics
  return $out;
}

//implementation of hook grabbit_status_form
function grabbit_deals_grabbit_status_form(){
	global $user;
	
	if($user->uid>0)
	{
	  drupal_add_js(drupal_get_path('module', 'grabbit_deals').'/deals_engine.js', $type = 'module');
	  drupal_add_js(drupal_get_path('module', 'grabbit_deals').'/stream_visibles.js', $type = 'module');
	}
	
}

function grabbit_deals_display()
{
  require_once 'amazon/amazon_api_class.php';
  
  $obj = new AmazonProductAPI();
  $nid = $_GET['nid'];
  global $user;
  $uid = $user->uid;
  $keys=grabbit_deals_extract_keywords($nid);
  $keywords = implode(', ',array_keys($keys));
  $keywords .= grabbit_deals_extract_tags( $nid, $uid );
  
  try
  {
    $result = $obj->getItemByKeyword($keywords, AmazonProductAPI::ALL);
    print $keywords;
    print_r($result);
  }
  catch(Exception $e)
  {
    $error = $e->getMessage();
  }
  
  if ( $result )
  {
    $out = 
    '<div class="deals-display clearfix">
      <a class="close" href="#">close</a>
      <h4>Deals that match your tags:</h4>';
      
    $i = 0;
    foreach ( $result->Items->Item as $deal )
    {
      if ( $deal->ItemAttributes->ListPrice->FormattedPrice )
      {
        $i++;
        if ( $i == 6 ) break;
      
        $out .= 
        '<div class="deal-item clearfix">'.
          l( 'buy', 'deals/open/'.$deal->ASIN, 
            array( 'attributes' => array('class' => 'buy', 'target' => '_blank'), 'absolute' => true ) ).'
          <div class="provider">Amazon.com</div>
          <div class="info">
            '.l( '&raquo; <span>more...</span>', 'deals/detail/'.$deal->ASIN , 
              array( 'attributes' => array('class' => 'more'), 'html' => true ) ).'
            <span class="name">'. $deal->ItemAttributes->Title .'</span>
            <span class="price">'. $deal->ItemAttributes->ListPrice->FormattedPrice .'</span>
          </div>
        </div>';
      }
    }
    $out .= '</div>';
  
    print $out;  
  }
  
}

function grabbit_deals_check_available($keywords=NULL)
{
  require_once 'amazon/amazon_api_class.php';
  
  $obj = new AmazonProductAPI();

  try
  {
    $result = $obj->getItemFast($keywords, AmazonProductAPI::ALL);
  }
  catch(Exception $e)
  {
    $error = $e->getMessage();
  }
  
  if ( $result )
  {
	return $result;
  }else{
    return NULL;	
  }
}

function grabbit_deals_calculate()
{
  $nid = $_GET['nid'];
  global $user;


  if($keywords = grabbit_deals_extract_keywords($nid) ){
	$keys= $keywords;
	print_r($keys);
	if($available = grabbit_deals_check_available($keys)){
	  print $available;	
	  return;
	}elseif ( $tags = grabbit_deals_extract_tags($nid, $user->uid) )
	  {
		if($user->uid==1){
		//	print_r($nid);
		 // print_r($tags);	
		}
		if($available = grabbit_deals_check_available($tags)){
		  print $available;
		  return;	
		}
	  }
  }else{
    if ( $tags = grabbit_deals_extract_tags($nid, $user->uid) )
	  {
		if($user->uid==1){
		//	print_r($nid);
		 // print_r($tags);	
		}
		if($available = grabbit_deals_check_available($tags)){
		  print $available;
		  return;	
		}
	  }	
  }

}


// estracts the matching tags of a node/userprofile
function grabbit_deals_extract_tags($nid, $uid){
	
	$node=node_load($nid);
	$profile = content_profile_load('profile', $uid);
	
	if($node->nid && $profile->nid){
		
	  // creates an array of tags from the node
	  $node_tags = array();
	  if(is_array($node->taxonomy)){
	    foreach($node->taxonomy as $node_tag){
		  $node_tags[]=$node_tag->name;
	    }	
	  }
	  
	  // creates an array of tags from the user profile
	  $profile_tags = array();
	  if(is_array($profile->taxonomy)){
		  foreach($profile->taxonomy as $profile_tag){
		    $profile_tags[]=$profile_tag->name;	
		  }
	  }
	
	  $result=array_intersect($profile_tags, $node_tags);
	  if(is_array($result)){
		  return implode(', ',$result);
	  }else{
	    return NULL;	
	  }
	
	}else{
		return 1; // the user has no profile or the parameters were incorrect
	}
}

function grabbit_deals_open_and_track(){
	$asin = arg(2);
	if(isset($asin)){
		require_once 'amazon/amazon_api_class.php';
		  $api = new AmazonProductAPI();

		  try
		  {
		    $result = $api->getItemByAsin($asin);
		    $deal = $result->Items->Item;
		  }
		  catch (Exception $e)
		  {
		    echo $e->getMessage();
		  }
		  if($deal->DetailPageURL){
			grabbit_statistics_save_deal_prog(base_path().'deals/open/'.$asin,$deal->ItemAttributes->ListPrice->FormattedPrice);
		    drupal_goto($deal->DetailPageURL);	
		  }
	 }
	 return NULL;
}

class autokeyword {

	//declare variables
	//the site contents
	var $contents;
	var $encoding;
	//the generated keywords
	var $keywords;
	//minimum word length for inclusion into the single word
	//metakeys
	var $wordLengthMin;
	var $wordOccuredMin;
	//minimum word length for inclusion into the 2 word
	//phrase metakeys
	var $word2WordPhraseLengthMin;
	var $phrase2WordLengthMinOccur;
	//minimum word length for inclusion into the 3 word
	//phrase metakeys
	var $word3WordPhraseLengthMin;
	//minimum phrase length for inclusion into the 2 word
	//phrase metakeys
	var $phrase2WordLengthMin;
	var $phrase3WordLengthMinOccur;
	//minimum phrase length for inclusion into the 3 word
	//phrase metakeys
	var $phrase3WordLengthMin;

	function autokeyword($params, $encoding)
	{
		//get parameters
		$this->encoding = $encoding;
		mb_internal_encoding($encoding);
		$this->contents = $this->replace_chars($params['content']);

		// single word
		$this->wordLengthMin = $params['min_word_length'];
		$this->wordOccuredMin = $params['min_word_occur'];

		// 2 word phrase
		$this->word2WordPhraseLengthMin = $params['min_2words_length'];
		$this->phrase2WordLengthMin = $params['min_2words_phrase_length'];
		$this->phrase2WordLengthMinOccur = $params['min_2words_phrase_occur'];

		// 3 word phrase
		$this->word3WordPhraseLengthMin = $params['min_3words_length'];
		$this->phrase3WordLengthMin = $params['min_3words_phrase_length'];
		$this->phrase3WordLengthMinOccur = $params['min_3words_phrase_occur'];

		//parse single, two words and three words

	}

	function get_keywords()
	{
		$keywords = $this->parse_words().$this->parse_2words().$this->parse_3words();
		return substr($keywords, 0, -2);
	}

	//turn the site contents into an array
	//then replace common html tags.
	function replace_chars($content)
	{
		//convert all characters to lower case
		$content = mb_strtolower($content);
		//$content = mb_strtolower($content, "UTF-8");
		$content = strip_tags($content);

      //updated in v0.3, 24 May 2009
		$punctuations = array(',', ')', '(', '.', "'", '"',
		'<', '>', '!', '?', '/', '-',
		'_', '[', ']', ':', '+', '=', '#',
		'$', '&quot;', '&copy;', '&gt;', '&lt;', 
		'&nbsp;', '&trade;', '&reg;', ';', 
		chr(10), chr(13), chr(9));

		$content = str_replace($punctuations, " ", $content);
		// replace multiple gaps
		$content = preg_replace('/ {2,}/si', " ", $content);

		return $content;
	}

	//single words META KEYWORDS
	function parse_words()
	{
		//list of commonly used words
		// this can be edited to suit your needs
		$common = array("able", "about", "above", "act", "add", "afraid", "after", "again", "against", "age", "ago", "agree", "all", "almost", "alone", "along", "already", "also", "although", "always", "am", "amount", "an", "and", "anger", "angry", "animal", "another", "answer", "any", "appear", "apple", "are", "arrive", "arm", "arms", "around", "arrive", "as", "ask", "at", "attempt", "aunt", "away", "back", "bad", "bag", "bay", "be", "became", "because", "become", "been", "before", "began", "begin", "behind", "being", "bell", "belong", "below", "beside", "best", "better", "between", "beyond", "big", "body", "bone", "born", "borrow", "both", "bottom", "box", "boy", "break", "bring", "brought", "bug", "built", "busy", "but", "buy", "by", "call", "came", "can", "cause", "choose", "close", "close", "consider", "come", "consider", "considerable", "contain", "continue", "could", "cry", "cut", "dare", "dark", "deal", "dear", "decide", "deep", "did", "die", "do", "does", "dog", "done", "doubt", "down", "during", "each", "ear", "early", "eat", "effort", "either", "else", "end", "enjoy", "enough", "enter", "even", "ever", "every", "except", "expect", "explain", "fail", "fall", "far", "fat", "favor", "fear", "feel", "feet", "fell", "felt", "few", "fill", "find", "fit", "fly", "follow", "for", "forever", "forget", "from", "front", "gave", "get", "gives", "goes", "gone", "good", "got", "gray", "great", "green", "grew", "grow", "guess", "had", "half", "hang", "happen", "has", "hat", "have", "he", "hear", "heard", "held", "hello", "help", "her", "here", "hers", "high", "hill", "him", "his", "hit", "hold", "hot", "how", "however", "I", "if", "ill", "in", "indeed", "instead", "into", "iron", "is", "it", "its", "just", "keep", "kept", "knew", "know", "known", "late", "least", "led", "left", "lend", "less", "let", "like", "likely", "likr", "lone", "long", "look", "lot", "make", "many", "may", "me", "mean", "met", "might", "mile", "mine", "moon", "more", "most", "move", "much", "must", "my", "near", "nearly", "necessary", "neither", "never", "next", "no", "none", "nor", "not", "note", "nothing", "now", "number", "of", "off", "often", "oh", "on", "once", "only", "or", "other", "ought", "our", "out", "please", "prepare", "probable", "pull", "pure", "push", "put", "raise", "ran", "rather", "reach", "realize", "reply", "require", "rest", "run", "said", "same", "sat", "saw", "say", "see", "seem", "seen", "self", "sell", "sent", "separate", "set", "shall", "she", "should", "side", "sign", "since", "so", "sold", "some", "soon", "sorry", "stay", "step", "stick", "still", "stood", "such", "sudden", "suppose", "take", "taken", "talk", "tall", "tell", "ten", "than", "thank", "that", "the", "their", "them", "then", "there", "therefore", "these", "they", "this", "those", "though", "through", "till", "to", "today", "told", "tomorrow", "too", "took", "tore", "tought", "toward", "tried", "tries", "trust", "try", "turn", "two", "under", "until", "up", "upon", "us", "use", "usual", "various", "verb", "very", "visit", "want", "was", "we", "well", "went", "were", "what", "when", "where", "whether", "which", "while", "white", "who", "whom", "whose", "why", "will", "with", "within", "without", "would", "yes", "yet", "you", "young", "your", "br", "img", "p","lt", "gt", "quot", "copy");
		//create an array out of the site contents
		$s = split(" ", $this->contents);
		//initialize array
		$k = array();
		//iterate inside the array
		foreach( $s as $key=>$val ) {
			//delete single or two letter words and
			//Add it to the list if the word is not
			//contained in the common words list.
			if(mb_strlen(trim($val)) >= $this->wordLengthMin  && !in_array(trim($val), $common)  && !is_numeric(trim($val))) {
				$k[] = trim($val);
			}
		}
		//count the words
		$k = array_count_values($k);
		//sort the words from
		//highest count to the
		//lowest.
		$occur_filtered = $this->occure_filter($k, $this->wordOccuredMin);
		arsort($occur_filtered);

		$imploded = $this->implode(", ", $occur_filtered);
		//release unused variables
		unset($k);
		unset($s);

		return $imploded;
	}

	function parse_2words()
	{
		//create an array out of the site contents
		$x = split(" ", $this->contents);
		//initilize array

		//$y = array();
		for ($i=0; $i < count($x)-1; $i++) {
			//delete phrases lesser than 5 characters
			if( (mb_strlen(trim($x[$i])) >= $this->word2WordPhraseLengthMin ) && (mb_strlen(trim($x[$i+1])) >= $this->word2WordPhraseLengthMin) )
			{
				$y[] = trim($x[$i])." ".trim($x[$i+1]);
			}
		}

		//count the 2 word phrases
		$y = array_count_values($y);

		$occur_filtered = $this->occure_filter($y, $this->phrase2WordLengthMinOccur);
		//sort the words from highest count to the lowest.
		arsort($occur_filtered);

		$imploded = $this->implode(", ", $occur_filtered);
		//release unused variables
		unset($y);
		unset($x);

		return $imploded;
	}

	function parse_3words()
	{
		//create an array out of the site contents
		$a = split(" ", $this->contents);
		//initilize array
		$b = array();

		for ($i=0; $i < count($a)-2; $i++) {
			//delete phrases lesser than 5 characters
			if( (mb_strlen(trim($a[$i])) >= $this->word3WordPhraseLengthMin) && (mb_strlen(trim($a[$i+1])) > $this->word3WordPhraseLengthMin) && (mb_strlen(trim($a[$i+2])) > $this->word3WordPhraseLengthMin) && (mb_strlen(trim($a[$i]).trim($a[$i+1]).trim($a[$i+2])) > $this->phrase3WordLengthMin) )
			{
				$b[] = trim($a[$i])." ".trim($a[$i+1])." ".trim($a[$i+2]);
			}
		}

		//count the 3 word phrases
		$b = array_count_values($b);
		//sort the words from
		//highest count to the
		//lowest.
		$occur_filtered = $this->occure_filter($b, $this->phrase3WordLengthMinOccur);
		arsort($occur_filtered);

		$imploded = $this->implode(", ", $occur_filtered);
		//release unused variables
		unset($a);
		unset($b);

		return $imploded;
	}

	function occure_filter($array_count_values, $min_occur)
	{
		$occur_filtered = array();
		foreach ($array_count_values as $word => $occured) {
			if ($occured >= $min_occur) {
				$occur_filtered[$word] = $occured;
			}
		}

		return $occur_filtered;
	}

	function implode($gule, $array)
	{
		$c = "";
		foreach($array as $key=>$val) {
			@$c .= $key.$gule;
		}
		return $c;
	}
}


function grabbit_deals_extract_keywords($string){

    $node=node_load($string);
    switch($node->type){
     case 'facebook':
       $string=$node->field_text[0]['value'];	
     break;
     case 'twitter':
       $string=$node->body;
     break;	
     default:
       $string=$node->title.' '.$node->teaser;
     break;
    }
  
   	$params['content'] = $string; // content
	//set the length of keywords you like
	$params['min_word_length'] = 5;  //minimum length of single words
	$params['min_word_occur'] = 2;  //minimum occur of single words

	$params['min_2words_length'] = 3;  //minimum length of words for 2 word phrases
	$params['min_2words_phrase_length'] = 10; //minimum length of 2 word phrases
	$params['min_2words_phrase_occur'] = 2; //minimum occur of 2 words phrase

	$params['min_3words_length'] = 3;  //minimum length of words for 3 word phrases
	$params['min_3words_phrase_length'] = 10; //minimum length of 3 word phrases
	$params['min_3words_phrase_occur'] = 2; //minimum occur of 3 words phrase

	$keyword = new autokeyword($params, "iso-8859-1");  
	
	return $keyword->get_keywords();
}