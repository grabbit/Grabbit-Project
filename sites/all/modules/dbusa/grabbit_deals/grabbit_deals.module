<?

/**
 * Implementation of hook_menu()
 */
function grabbit_deals_menu() {

  $items['deals/display'] = array( 
    'page callback' => 'grabbit_deals_display', 
    'access arguments' => array('access content')
  );
  
  $items['deals/calculate'] = array( 
    'page callback' => 'grabbit_deals_calculate', 
    'access arguments' => array('access content')
  );
  
  $items['deals/detail'] = array( 
    'page callback' => 'grabbit_deals_detail', 
    'access arguments' => array('access content')
  );

  $items['deals/open'] = array( 
    'page callback' => 'grabbit_deals_open_and_track', 
    'access arguments' => array('access content')
  );

  return $items;
}

// renders the page view of a specific deal
function grabbit_deals_detail()
{
  $asin = arg(2);
  
  require_once 'amazon/amazon_api_class.php';
  $api = new AmazonProductAPI();
  
  try
  {
    $result = $api->getItemByAsin($asin);
    $deal = $result->Items->Item;
  }
  catch (Exception $e)
  {
    echo $e->getMessage();
  }
  
  $listprice = (int)$deal->ItemAttributes->ListPrice->Amount;
  $offer = (int)$deal->OfferSummary->LowestNewPrice->Amount;
  
  $out = '
  <div class="deal-detail">
    <h1>Amazon Deal</h1>
    <div class="back">'.l('&laquo; <span>Back to stream</span>', '<front>', array('html' => true)).'</div>
    <div class="deal-container">
      <div class="group">'.$deal->ItemAttributes->ProductGroup.'</div>
      
      <div class="clearfix">
          
        <div class="image">
            <img src="'.$deal->LargeImage->URL.'" width="250"/>
            '.l('buy', $deal->DetailPageURL, array( 'attributes' => array('class' => 'buy', 'target' => '_blank'), 'absolute' => true )).'
            <div class="product-link">
              <strong>Or go to product page:</strong>'.l(substr($deal->DetailPageURL, 0, 60).'...', $deal->DetailPageURL, array( 'attributes' => array('target' => '_blank'), 'absolute' => true )).'
            </div>
        </div>
        <div class="info">
          <h2>'.$deal->ItemAttributes->Title.'</h2>
          <div class="asin">Product #: '.$asin.'</div>
          <div class="prices">
            <div class="list">List Price: '.$deal->ItemAttributes->ListPrice->CurrencyCode.' '.$deal->ItemAttributes->ListPrice->FormattedPrice.'</div>';
    if ( $listprice != $offer )
    {
      $out .= '<div class="lowest">Lowest New Price: <span>'.$deal->OfferSummary->LowestNewPrice->CurrencyCode.' '.$deal->OfferSummary->LowestNewPrice->FormattedPrice.'</span></div>'; 
    }
    $out .= '
            </div>
            <div class="description">'.$deal->EditorialReviews->EditorialReview->Content.'</div>
          </div>
        
      </div>
      <div class="from">From <span>Amazon.com</span></div>
    </div>
  </div>
    ';
    
  return $out;
}

//implementation of hook grabbit_status_form
function grabbit_deals_grabbit_status_form(){
	global $user;
	
	if($user->uid>0)
	{
	  drupal_add_js(drupal_get_path('module', 'grabbit_deals').'/deals_engine.js', $type = 'module');
	  drupal_add_js(drupal_get_path('module', 'grabbit_deals').'/stream_visibles.js', $type = 'module');
	}
	
}

function grabbit_deals_display()
{
  require_once 'amazon/amazon_api_class.php';
  
  $obj = new AmazonProductAPI();
  $nid = $_GET['nid'];
  global $user;
  $uid = $user->uid;
  
  $keywords = grabbit_deals_extract_tags( $nid, $uid );
  
  try
  {
    $result = $obj->getItemByKeyword($keywords, AmazonProductAPI::ALL);
  }
  catch(Exception $e)
  {
    $error = $e->getMessage();
  }
  
  if ( $result )
  {
    $out = 
    '<div class="deals-display clearfix">
      <a class="close" href="#">close</a>
      <h4>Deals that match your tags:</h4>';
      
    $i = 0;
    foreach ( $result->Items->Item as $deal )
    {
      if ( $deal->ItemAttributes->ListPrice->FormattedPrice )
      {
        $i++;
        if ( $i == 6 ) break;
      
        $out .= 
        '<div class="deal-item clearfix">'.
          l( 'buy', $deal->DetailPageURL, 
            array( 'attributes' => array('class' => 'buy', 'target' => '_blank'), 'absolute' => true ) ).'
          <div class="provider">Amazon.com</div>
          <div class="info">
            '.l( '&raquo; <span>more...</span>', 'deals/detail/'.$deal->ASIN , 
              array( 'attributes' => array('class' => 'more'), 'html' => true ) ).'
            <span class="name">'. $deal->ItemAttributes->Title .'</span>
            <span class="price">'. $deal->ItemAttributes->ListPrice->FormattedPrice .'</span>
          </div>
        </div>';
      }
    }
    $out .= '</div>';
  
    print $out;  
  }
}

function grabbit_deals_check_available($keywords=NULL)
{
  require_once 'amazon/amazon_api_class.php';
  
  $obj = new AmazonProductAPI();
  
  try
  {
    $result = $obj->getItemFast($keywords, AmazonProductAPI::ALL);
  }
  catch(Exception $e)
  {
    $error = $e->getMessage();
  }
  
  if ( $result )
  {
	return $result;
  }else{
    return NULL;	
  }
}

function grabbit_deals_calculate()
{
  $nid = $_GET['nid'];
  global $user;
  
  if ( $tags = grabbit_deals_extract_tags($nid, $user->uid) )
  {
	if($available = grabbit_deals_check_available($tags)){
	  print $available;	
	}
  }
}

// estracts the matching tags of a node/userprofile
function grabbit_deals_extract_tags($nid, $uid){
	
	$node=node_load($nid);
	$profile = content_profile_load('profile', $uid);
	if($node->nid && $profile->nid){
		
	  // creates an array of tags from the node
	  $node_tags = array();
	  if(is_array($node->tags[3])){
	    foreach($node->tags[3] as $node_tag){
		  $node_tags[]=$node_tag->name;
	    }	
	  }
	  
	  // creates an array of tags from the user profile
	  $profile_tags = array();
	  if(is_array($profile->tags)){
	    foreach($profile->tags as $vocabulary){
		  foreach($vocabulary as $profile_tag){
		    $profile_tags[]=$profile_tag->name;	
		  }
	    }	
	  }
	
	  //print_r($node_tags);
	  //print_r($profile_tags);
	  $result=array_intersect($profile_tags, $node_tags);
	  if(is_array($result)){
		  return implode(', ',$result);
	  }else{
	    return NULL;	
	  }
	
	}else{
		return 1; // the user has no profile or the parameters were incorrect
	}
}

function grabbit_deals_open_and_track(){
	$asin = arg(2);
	if(isset($asin)){
		require_once 'amazon/amazon_api_class.php';
		  $api = new AmazonProductAPI();

		  try
		  {
		    $result = $api->getItemByAsin($asin);
		    $deal = $result->Items->Item;
		  }
		  catch (Exception $e)
		  {
		    echo $e->getMessage();
		  }
		  if($deal->DetailPageURL){
		    drupal_goto($deal->DetailPageURL);	
		  }
	 }
	 return NULL;
}