<?

/**
 * Implementation of hook_menu()
 */
function grabbit_deals_menu() {

  $items['deals/display'] = array( 
    'page callback' => 'grabbit_deals_display', 
    'access arguments' => array('access content')
  );

  return $items;
}

//implementation of hook grabbit_status_form
function grabbit_deals_grabbit_status_form(){
	global $user;
	
	if($user->uid>0)
	{
	  drupal_add_js(drupal_get_path('module', 'grabbit_deals').'/deals_engine.js', $type = 'module');		
	}
	
}

function grabbit_deals_display()
{
  require_once 'amazon/amazon_api_class.php';
  
  $obj = new AmazonProductAPI();
  $nid = $_GET['nid'];
  global $user;
  $uid = $user->uid;
  
  $keywords = grabbit_deals_extract_tags( $nid, $uid );
  
  try
  {
    $result = $obj->getItemByKeyword($keywords, AmazonProductAPI::ALL);
  }
  catch(Exception $e)
  {
    //echo $e->getMessage();
  }
  
  if ( $result )
  {
    // get the first five deals ONLY
    $result = array_slice( $result, 0, 5 );
    
    // build the markup
    $out = 
    '<div class="deals-display clearfix">
      <a class="close" href="#">close</a>
      <h4>Deals that match your tags:</h4>';
    
    foreach ( $result->Items->Item as $i )
    {
      $out .= 
      '<div class="deal-item clearfix">'.
        l( 'buy', $i->DetailPageURL, 
          array( 'attributes' => array('class' => 'buy'), 'absolute' => true ) ).'
        <div class="provider">Amazon.com</div>
        <div class="info">
          <a class="more" href="#">&raquo; <span>more...</span></a>
          <span class="name">'. $i->ItemAttributes->Title .'</span>
          <span class="price">'. $i->ItemAttributes->ListPrice->FormattedPrice .'</span>
        </div>
      </div>';
    }
    
    $out .= '</div>';
  
    print $out;  
  }
}

// estracts the matching tags of a node/userprofile
function grabbit_deals_extract_tags($nid, $uid){
	
	$node=node_load($nid);
	$profile = content_profile_load('profile', $uid);
	if($node->nid && $profile->nid){
		
	  // creates an array of tags from the node
	  if(is_array($node->tags[3])){
	    foreach($node->tags[3] as $node_tag){
		  $node_tags[]=$node_tag->name;
	    }	
	  }
	  
	  // creates an array of tags from the user profile
	  if(is_array($profile->tags)){
	    foreach($profile->tags as $vocabulary){
		  foreach($vocabulary as $profile_tag){
		    $profile_tags[]=$profile_tag->name;	
		  }
	    }	
	  }
	
	  //print_r($node_tags);
	  //print_r($profile_tags);
	  $result=array_intersect($profile_tags, $node_tags);
	  if(is_array($result)){
		  return implode(', ',$result);
	  }else{
	    return NULL;	
	  }
	
	}else{
		return 1; // the user has no profile or the parameters were incorrect
	}
}