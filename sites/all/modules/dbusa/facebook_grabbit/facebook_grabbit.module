<?
//$Id$
 
/**
 * Implementation of hook_menu()
 */
function facebook_grabbit_menu () {
  $items['app/facebook'] = array( 
    'title' => 'Grabbit.net Facebook', 
    'page callback' => 'facebook_grabbit_facebook', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  ); 

    $items['stream/user'] = array( 
    'title' => 'View my personal stream', 
    'page callback' => 'facebook_grabbit_private_view', 
    'access arguments' => array('access content')
  );
  
  return $items;
}

/**
 * Implementation of hook_form()
 */

function facebook_grabbit_update_form($form_state){

	require_once("facebook/facebook.php");
	require_once("facebook/facebook_desktop.php");
	include("facebook/config.php");
	
	global $user;
	$fuser = facebook_grabbit_get_fid($user->uid);
	
	if ($fuser){
		
		$suser=$fuser->fid;
		$session_key=$fuser->kid;

		$facebook = new FacebookDesktop($api_key, $secret);
		$facebook->set_user($suser, $session_key);

		$status = $facebook->api_client->call_method("facebook.status.get", array('uid'=>$suser, 'limit'=>'5'));

		$form['cstatus'] = array(
		  '#type' => 'item',
		  '#title' => t('Current Facebook Status'),
		  '#value' => $status[0]['message'],
		);
		
		$form['facebook']= array(
		'#type' => 'checkbox',
		'#default_value' => 1,
		'#title'=>'Facebook',
		'#weight'=>5
		);
	
	}
	else{
		$form['facebook'] = array(
		  '#type' => 'item',
		  '#title' => t('Allow Grabbit to update your Facebook Status'),
		  '#value' => l('<img src="'.base_path().drupal_get_path('module', 'facebook_grabbit').'/facebook/connect.gif">','http://apps.facebook.com/onixmedia/?duid='.$user->uid,array('html'=>TRUE,'attributes'=>array('target'=>'blank'))),
		);
	}
	
	$accounts = module_invoke_all('twitter_accounts', $user, TRUE);
	if(count($accounts)){
		$tw=TRUE;
		
        $form['twitter']= array(
		'#type' => 'checkbox',
		'#default_value' => 1,
		'#title'=>'Twitter',
		'#weight'=>5
		);
	}
	else{
		$tw=FALSE;
	}
	
	if($tw || $fb){
		$form['status'] = array(
		    '#type' => 'textfield',
		    '#title' => t('New Status'),
		    '#size' => 60,
		    '#maxlength' => 255,
		    '#required' => true );

		$form['submit'] = array(
		    '#type' => 'submit',
		    '#value' => t('Update Status'),
		    '#weight'=>10
		);
	}
	
	
	return $form;
	
}

function facebook_grabbit_update_form_submit ($form, &$form_state) {
	
	if($form_state['values']['facebook']){
		require_once("facebook/facebook.php");
		require_once("facebook/facebook_desktop.php");
		include("facebook/config.php");

		global $user;
		$fuser = facebook_grabbit_get_fid($user->uid);

		$suser=$fuser->fid;
		$session_key=$fuser->kid;

		$facebook = new FacebookDesktop($api_key, $secret);
		$facebook->set_user($suser, $session_key);

		$facebook->api_client->call_method('facebook.users.setStatus', array('api_key' => $api_key,
		                                                                     'uid'=>"$suser",
		                                                                     'status'=>$form_state['values']['status']));

		drupal_set_message('You have changed your facebook status');	
	}
	if($form_state['values']['twitter']){
		global $user;
		module_load_include('inc', 'twitter');
		
		$accounts = module_invoke_all('twitter_accounts', $user, TRUE);
		$account = array_shift($accounts); 

		twitter_set_status($account['screen_name'], $account['password'], $form_state['values']['status'], $source = 'Onix');
	}
	
	
}

function facebook_grabbit_feed(){

	require_once("facebook/facebook.php");
	require_once("facebook/facebook_desktop.php");
	include("facebook/config.php");
	$app_id='90953553995';
	
	global $user;
	$fuser = facebook_grabbit_get_fid($user->uid);

	if ($fuser){
		
		$suser=$fuser->fid;
		$session_key=$fuser->kid;

		$facebook = new FacebookDesktop($api_key, $secret);
		$facebook->set_user($suser, $session_key);
		$s_key=$facebook->api_client->session_key;
		
		//Generate the md5 sig for facebook application
		$args = array(
		  'app_id' => $app_id,
		  'session_key' => $s_key,
		  'source_id'=>$suser
		);

		$request_str = '';

		foreach ($args as $key => $value)
		{
		  $request_str .= $key . '=' . $value;
		}

		$sig = $request_str . $secret;
		$sig = md5($sig);
		
		$output = drupal_http_request('http://www.facebook.com/activitystreams/feed.php?source_id='.$suser.'&app_id='.$app_id.'&session_key='.$facebook->api_client->session_key.'&sig='.$sig.'&v=0.7&read', $headers = array(), $method = 'GET', $data = NULL, $retry = 3);
		
        print $output->data;
		
	}
	else{
		return "You have no facebook account yet";
	}

	
}

function facebook_grabbit_stream(){

	require_once("facebook/facebook.php");
	require_once("facebook/facebook_desktop.php");
	include("facebook/config.php");
	$app_id='90953553995';
	
	global $user;
	$fuser = facebook_grabbit_get_fid($user->uid);
	
	if ($fuser){
		
		$suser=$fuser->fid;
		$session_key=$fuser->kid;

		$facebook = new FacebookDesktop($api_key, $secret);
		$facebook->set_user($suser, $session_key);
		
		$stream = $facebook->api_client->stream_get($suser);
		
		$friends = $stream['profiles'];
		$posts = $stream['posts'];

		foreach($friends as $friend){
			$profiles[$friend['id']] = $friend; 
		}

		foreach ($posts as $post){
			if(!$post['attachment']){ //STATUS UPDATE
				$target='';
				if($post['target_id'])
				  $target='> <a href="'.$profiles[$post['actor_id']]['url'].'">'.$profiles[$post['target_id']]['name'].'</a>';
				$output .= prepeare_status_update($post, $profiles[$post['actor_id']],$target);
			}else{		             // OTHER UPDATES SUPPORTED
				$output .= prepeare_standar_update($post, $profiles[$post['actor_id']]);
			}
		
			
	  }
	return $output;
    }
	else{
		return "You have no facebook account yet";
	}

	
}


/**
 * Facebook aplication using facebook API()
 */

	
function facebook_grabbit_facebook(){

  // the facebook client library
  include_once 'facebook/facebook.php';

  include_once("facebook/config.php");  

  $facebook = new Facebook($api_key, $secret);
  $facebook->require_frame();
  $user = $facebook->require_login();

  $duid=$_GET["duid"];

  if (!$facebook->api_client->users_hasAppPermission("status_update")  || !$facebook->api_client->users_hasAppPermission("offline_access") || !$facebook->api_client->users_hasAppPermission("read_stream") || !$facebook->api_client->users_hasAppPermission("publish_stream")){  
    $output .= '<fb:prompt-permission perms="status_update, offline_access, read_stream, publish_stream" next_fbjs="after(\'http://apps.facebook.com/onixmedia/?duid='.$duid.'\')"><strong>Let Grabbit.net update your status!</strong></fb:prompt-permission>';  
    $visibility = "none";  
  }else{
    $visibility = "block";
  
	if(!$_GET["duid"]){
	    $output = "There was a problem accessing your Grabbit account, please go back to grabbit.net and try again";	
	}else{
	  	$sessionkey = $_REQUEST['fb_sig_session_key'];

	    $fid=$facebook->api_client->user;
	    facebook_grabbit_save_fid($_GET["duid"],$fid,$sessionkey);
	}
    
  }  

  $output .='<div id="statusdiv" style="display:'.$visibility.';">  
	   <strong>Thank you for installing this app, go to Grabbit to change your facebook status</strong>
	</div>  
	<script>
	function after(url){
	  document.setLocation(url);
	}
	</script>';

  print $output;
}

/**
 * Save the facebook ID and Key on the facebook app()
 */
function facebook_grabbit_save_fid($user,$fid,$kid){

  $check = facebook_grabbit_get_fid($user);

  if(!$check){
    db_query("INSERT INTO {facebook_grabbit} (uid, kid, fid) VALUES (%d, '%s', %d)",$user,$kid,$fid);	
    $result = TRUE;
  }
  else{
    db_query("UPDATE {facebook_grabbit} SET kid='%s', fid=%d WHERE uid=%d",$kid,$fid,$user);	
    $result = TRUE;
  }

  return $result;

}

/**
 * Get the facebook ID and Key from any user()
 */
function facebook_grabbit_get_fid($user){
	
  $result = db_query("SELECT * FROM {facebook_grabbit} WHERE uid = %d",$user);

  if ($user = db_fetch_object($result)) {
	$user = $user;
  }
  else{
    $user = FALSE;	
  }

  return $user;
}



function prepeare_status_update($post,$user,$target,$profiles){
	
	if(is_array($post['comments']['comment_list'])){
		foreach($post['comments']['comment_list'] as $comment){
			$show_comments .='<div class="facebook-comments"><a title="'.$profiles[$comment['fromid']]['name'].'" class="facebook-story-pic" href="'.$profiles[$comment['fromid']]['url'].'"><span class="facebook-user-pic"><img class="facebook-image-s" alt="'.$profiles[$comment['fromid']]['name'].'" src="'.$profiles[$comment['fromid']]['pic_square'].'" width="30"/></span></a>
			<span class="facebook-comment-timeline"><a title="'.$profiles[$comment['fromid']]['name'].'" class="facebook-comment-link" href="'.$profiles[$comment['fromid']]['url'].'">'.$profiles[$comment['fromid']]['name'].'</a> commented on '.format_date($comment['time']).'</span>
			<span class="facebook-comment-text">'.$comment['text'].'</span>
			</div>';
		}	
	}
    
	$output = '<div class="facebook-post clearfix" id="fb_story_'.$post['post_id'].'"><div class="facebook-header">Facebook</div>
	<div class="facebook-post-header"><a title="'.$user['name'].'" class="facebook-story-pic" href="'.$user['url'].'"><span class="facebook-user-pic"><img class="facebook-image-s" alt="'.$user['name'].'" src="'.$user['pic_square'].'"/></span></a>
	<a title="'.$user['name'].'" class="facebook-story-name" href="'.$post['permalink'].'"><span class="facebook-user-name">'.$user['name'].' </span></a>'.$target.'
	<div class="facebook-post-body">
	  '.$post['message'].'<br><br>'.format_date($post['created_time']).'
	</div>'.$show_comments.'
	<div class="facebook-comment-form"><a href="javascript:void(0);" class="facebook-makecomment-link">Post a comment</a><div class="facebook-form" style="display:none;">'.drupal_get_form('facebook_grabbit_comment_form',$post['post_id']).'</div></div>
	</div>
	</div>';
	
	return $output;
}

function prepeare_standar_update($post,$user,$profiles){
	
	$attachment = '';
	
	if($post['attachment']['name'])
	  $attachment .='<span class="facebook-attach-title">'.$post['attachment']['name'].'</span>';
	
	if($post['attachment']['description'])
	  $attachment .='<span class="facebook-attach-text">'.$post['attachment']['description'].'</span>';

    if($post['attachment']['media']!=''){
	  	foreach($post['attachment']['media'] as $media){
	      if($media['type'] =="photo"){
		    $attachment .='<span class="facebook-attach-photo"><a href="'.$media['href'].'"><img src="'.$media['src'].'" /></a></span>';
	      }
		  if($media['type'] =="link"){
		    $attachment .='<span class="facebook-attach-link"><a href="'.$media['href'].'"><img src="'.$media['src'].'" /></a></span>';
	      }
	      if($media['type'] =="video"){
		    $attachment .='<span class="facebook-attach-video">Video: <a href="'.$media['href'].'"><img src="'.$media['src'].'" /></a></span>';
	      }
		}
    }
	
	if(is_array($post['comments']['comment_list'])){
		foreach($post['comments']['comment_list'] as $comment){
			$show_comments .='<div class="facebook-comments"><a title="'.$profiles[$comment['fromid']]['name'].'" class="facebook-story-pic" href="'.$profiles[$comment['fromid']]['url'].'"><span class="facebook-user-pic"><img class="facebook-image-s" alt="'.$profiles[$comment['fromid']]['name'].'" src="'.$profiles[$comment['fromid']]['pic_square'].'" width="30"/></span></a>
			<span class="facebook-comment-timeline"><a title="'.$profiles[$comment['fromid']]['name'].'" class="facebook-comment-link" href="'.$profiles[$comment['fromid']]['url'].'">'.$profiles[$comment['fromid']]['name'].'</a> commented on '.format_date($comment['time']).'</span>
			<span class="facebook-comment-text">'.$comment['text'].'</span>
			</div>';
		}	
	}
	
	$output = '<div class="facebook-post clearfix" id="fb_story_'.$post['post_id'].'"><div class="facebook-header">Facebook</div>
	<div class="facebook-post-header"><a title="'.$user['name'].'" class="facebook-story-pic" href="'.$user['url'].'"><span class="facebook-user-pic"><img class="facebook-image-s" alt="'.$user['name'].'" src="'.$user['pic_square'].'"/></span></a>
	<a title="'.$user['name'].'" class="facebook-story-name" href="'.$post['permalink'].'"><span class="facebook-user-name">'.$user['name'].'</span></a>
	<div class="facebook-post-body">
	  '.$post['message'].'
	</div><div class="facebook-attachment">'.$attachment.'</div><br><br>'.format_date($post['created_time']).'
	'.$show_comments.'
	<div class="facebook-comment-form"><a href="javascript:void(0);" class="facebook-makecomment-link">Post a comment</a><div class="facebook-form" style="display:none;">'.drupal_get_form('facebook_grabbit_comment_form',$post['post_id']).'</div></div>
	</div>
	</div>';
	
	return $output;
}



/**
 * Gets the twitter stream()
 */
function facebook_grabbit_twitter_stream(){
	global $user;
	
	$accounts = module_invoke_all('twitter_accounts', $user, TRUE);
	if(count($accounts)){
		$account = array_shift($accounts); 

		$output = facebook_grabbit_get_friends_timeline($account);	
	}
	else{
		$output = "You dont have a twitter account yet";
	}
	
	
	return $output;
}

/**
* Grab the latest posts from you and your twitter friends.
*/
function facebook_grabbit_get_friends_timeline($account) {

  $twitter_encrypted = base64_encode($account['screen_name'] .':'. $account['password']);

  $headers = array('Authorization' => 'Basic '. $twitter_encrypted,
                   'Content-type' => 'application/x-www-form-urlencoded');

  $result = drupal_http_request('http://twitter.com/statuses/friends_timeline.xml', $headers, 'GET');

  $xml = new SimpleXMLElement($result->data);

  foreach ($xml->status as $message){
		
	$output .= theme_twitter_message($message);

  }
  return $output;
}


/**
 * Creates users private view()
 */

function facebook_grabbit_private_view(){

	drupal_add_js('1.
      $(document).ready(function() {
   		$(".facebook-makecomment-link").click(function () {
		  $(this).next("div").slideToggle("slow"); 
		});
		
		$(".twit-reply").click(function () {
		  var to = $(this).attr("id"); 
		  $("#edit-status").val(to);
		  $("#edit-status").focus();
		});
      });', $type = 'inline');
	
	global $user;
	
	require_once("facebook/facebook.php");
	require_once("facebook/facebook_desktop.php");
	include("facebook/config.php");
	$app_id='90953553995';
	
	$view = views_get_view('grabbit_public_stream');
	
	if ($_GET['tags']){
		$tags = implode(" ", $_GET['tags']);
		$filters[0] = $tags;
	}else{
		$filters[0] = 'all';	
	}
	if ($_GET['feeds']){
		$tags = implode(" ", $_GET['feeds']);
        $filters[1] = $tags;
	}else{
		$filters[1] = 'all';
	}

	$view->set_arguments(array($filters[0],$filters[1]));	
	
	$view->execute();

    foreach($view->result as $node){
	  $twitface[$node->node_created]=$node;
    }
	
	$output .=drupal_get_form('facebook_grabbit_update_form');
	
	$fuser = facebook_grabbit_get_fid($user->uid);
	
	if ($fuser){
		$fb = TRUE;
		if(!$_GET['hide_facebook']){
			
			$suser=$fuser->fid;
			$session_key=$fuser->kid;

			$facebook = new FacebookDesktop($api_key, $secret);
			$facebook->set_user($suser, $session_key);

			$stream = $facebook->api_client->call_method('facebook.Stream.get', array('session_key' => $session_key,
			                                                                     'viewer_id'=>$suser,    
			                                                                     'limit'=>"15"));
			$friends = $stream['profiles'];
			$posts = $stream['posts'];

			foreach($friends as $friend){
				$profiles[$friend['id']] = $friend; 
			}

			foreach ($posts as $post){
				$twitface[$post['created_time']]=$post;
			}	
		}
				
	}else{
	    $fb = FALSE;
	}
	
	$accounts = module_invoke_all('twitter_accounts', $user, TRUE);
	if(count($accounts)){
		$tw = TRUE;
		if(!$_GET['hide_twitter']){
			
			$account = array_shift($accounts); 

			$twitter_encrypted = base64_encode($account['screen_name'] .':'. $account['password']);
			$headers = array('Authorization' => 'Basic '. $twitter_encrypted,
			                   'Content-type' => 'application/x-www-form-urlencoded');

			$result = drupal_http_request('http://twitter.com/statuses/friends_timeline.xml', $headers, 'GET');
			$xml = new SimpleXMLElement($result->data);

			foreach ($xml->status as $message){

			  $time = strtotime($message->created_at);
			  $twitface[$time]=$message;

			}	
		}
	}
	else{
		$tw = FALSE;
	}
	
	if(!$tw && !$fb){
	  return "You have no Twitter or Facebook accounts yet";	
	}
	else{
		if(is_array($twitface)){
			ksort($twitface);
			$result = array_reverse($twitface);
			foreach($result as $entry){
				if(is_array($entry)){
					if(!$entry['attachment']){ //STATUS UPDATE
						$target='';
						if($entry['target_id'])
						  $target='> <a href="'.$profiles[$entry['actor_id']]['url'].'">'.$profiles[$entry['target_id']]['name'].'</a>';

						$output .= prepeare_status_update($entry, $profiles[$entry['actor_id']],$target,$profiles);
						$comments=array();
					}else{		             // OTHER UPDATES SUPPORTED
						$output .= prepeare_standar_update($entry, $profiles[$entry['actor_id']],$profiles);
					}
				}
				else{
					if($entry->nid){
						$node=node_load($entry->nid);
						$output .= node_view($node, TRUE, FALSE, TRUE);
					}
					else{
	                  $output .= theme_twitter_message($entry);
	                }

				}
			}	
		}
			
	}
	
	return $output;

}



/**
 * Implementation of hook_block()
 */
function facebook_grabbit_block($op = 'list', $delta = 0, $edit = array()) {
  switch($op) {
    case 'list':
      $blocks[0]['info'] = t('Filter by Feed');
      return $blocks;
      break;
    case 'view':
      switch ( $delta )
      {
		case 0:
          $blocks['title'] = 'Filter Feeds by Source';
          $blocks['content'] = drupal_get_form('facebook_grabbit_feeds_form');
          break;
      }
      return $blocks;
      break;
  }
}

/**
* Generate the tags block/form
*/
function facebook_grabbit_feeds_form(){
	$taxonomy = taxonomy_get_tree(2);
	foreach($taxonomy as $term){
		$terms[$term->tid]=$term->name;
	}
	$taxonomy_tags = taxonomy_get_tree(3);
	foreach($taxonomy_tags as $term){
		$terms_tags[$term->tid]=$term->name;
	}
	$feeds=array();
	
	
	if($_GET['feeds'])
	  $feeds=$_GET['feeds'];
	
	$form['hide_facebook'] = array(
	    '#type'=> 'checkbox',
		'#title' => t('Hide Facebook'),
		'#default_value' => $_GET['hide_facebook']
	    );
	
	$form['hide_twitter'] = array(
	    '#type'=> 'checkbox',
		'#title' => t('Hide Twitter'),
		'#default_value' => $_GET['hide_twitter']
	    );
	
	$form['feeds'] = array(
	    '#type'=> 'checkboxes',
	    '#title'=>'By Source',
	    '#options'=> $terms,
	    '#default_value'=> $feeds,
	    );
	
	$form['submit1'] = array('#type' => 'submit', 
	                       '#value' => t('Filter'));
	
	$tags=array();
	if($_GET['tags'])
	  $tags=$_GET['tags'];

	$form['tags'] = array(
	    '#type'=> 'checkboxes',
	    '#title'=>'By tags',
	    '#options'=> $terms_tags,
	    '#default_value'=> $tags,
	    );
	
	$form['submit'] = array('#type' => 'submit', 
	                        '#value' => t('Filter'));
	$form['#method'] = 'get';
		
	return $form;
}

/**
* Theme each meesage.
*/
function theme_twitter_message($message){

	$output = '<div class="twitter-message-stream clearfix"><div class="twitter-header">Twitter</div>
	          <div class="listable"><span class="twitter-image"><img src="'.$message->user->profile_image_url.'" /></span></div>
	          <span class="twitter-body"><strong>'.$message->user->name.'</strong> '.$message->text . ' <span class="twitter-date"> on '. format_date(strtotime($message->created_at)) . '</span></span>
	            <div class="twitter-reply"><a href="#facebook-grabbit-update-form" class="twit-reply" id="@'.$message->user->screen_name.'">Reply</a></div>
	          </div>';
	return $output; 
}

/**
* hook form alter
*/
function facebook_grabbit_form_alter(&$form, $form_state, $form_id){

}

/**
 * Implementation of hook_form() for post comments on facebook
 */

function facebook_grabbit_comment_form($form_state, $post_id){
	
  	$form['comment'] = array(
	    '#type' => 'textfield',
	    '#size' => 60,
	    '#maxlength' => 255,
	    '#required' => true );

	$form['submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Comment'),
	    '#weight'=>10
	);	
	$form['post_id'] = array(
	    '#type' => 'hidden',
	    '#value' => $post_id
	);
	
  return $form;
}

function facebook_grabbit_comment_form_submit ($form, &$form_state) {
	
		require_once("facebook/facebook.php");
		require_once("facebook/facebook_desktop.php");
		include("facebook/config.php");

		global $user;
		$fuser = facebook_grabbit_get_fid($user->uid);

		$suser=$fuser->fid;
		$session_key=$fuser->kid;

		$facebook = new FacebookDesktop($api_key, $secret);
		$facebook->set_user($suser, $session_key);

		$test = $facebook->api_client->call_method('facebook.Stream.addComment', array('session_key' => $session_key,
		                                                                     'post_id'=>$form_state['clicked_button']['#post']['post_id'],
		                                                                     'comment'=>$form_state['clicked_button']['#post']['comment']));


		drupal_set_message('You have commented on facebook');
	
}