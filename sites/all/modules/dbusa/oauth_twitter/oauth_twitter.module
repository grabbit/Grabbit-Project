<?php

/**
 * Implementation of hook_menu()
 */
function oauth_twitter_menu()
{
  $items['confirm/twitter'] = array( 
    'title' => 'Grabbit application has been added', 
    'page callback' => 'oauth_twitter_page', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
 
  $items['application/twitter'] = array( 
    'title' => 'Grabbit application', 
    'page callback' => 'oauth_twitter_authorize', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['application/ajustes'] = array( 
    'title' => 'Grabbit application', 
    'page callback' => 'oauth_twitter_ajuste', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['user/%user_category/edit/twitterapp'] = array(
    'title' => 'Twitter account',
    'page callback' => 'oauth_twitter_account',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'load arguments' => array('%map', '%index'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_user().
 */
function oauth_twitter_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'categories':
      return array(
        array(
          'name' => 'twitterapp',
          'title' => 'Twitter account',
          'weight' => 3,
        ),
      );
  }
}

// Main ReciveMail Class File - Version 1.1 (02-06-2009)
/*
 * File: recivemail.class.php
 * Description: Reciving mail With Attechment
 * Version: 1.1
 * Created: 01-03-2006
 * Modified: 02-06-2009
 * Author: Mitul Koradia
 * Email: mitulkoradia@gmail.com
 * Cell : +91 9825273322
 */
 
/***************** Changes *********************
*
* 1) Added feature to retrive embedded attachment - Changes provided by. Antti <anttiantti83@gmail.com>
* 2) Added SSL Supported mailbox.
*
**************************************************/

class receiveMail
{
        var $server='';
        var $username='';
        var $password='';
       
        var $marubox='';                                       
       
        var $email='';                 
       
        function receiveMail($username,$password,$EmailAddress,$mailserver='pop.gmail.com',$servertype='pop3',$port='995',$ssl = true) //Constructure
        {
                if($servertype=='imap')
                {
                        if($port=='') $port='143';
                        $strConnect='{'.$mailserver.':'.$port. '}INBOX';
                }
                else if($servertype=='gmail')
                {
                        
                        $strConnect='{imap.googlemail.com:993/imap/ssl}INBOX';
                }
                else
                {
                        $strConnect='{'.$mailserver.':'.$port. '/pop3'.($ssl ? "/ssl" : "").'}INBOX';
                }
                $this->server                   =       $strConnect;
                $this->username                 =       $username;
                $this->password                 =       $password;
                $this->email                    =       $EmailAddress;
        }
        function connect() //Connect To the Mail Box
        {
                $this->marubox=@imap_open(
	              $this->server,
	              $this->username,
	              $this->password,
			      OP_READONLY
			    );
               
                if(!$this->marubox)
                {
                        echo "Error: Connecting to mail server";
                        echo $this->marubox;
                        echo "Error: Connecting to mail server";                       
                        exit;
                }
        }
        function getHeaders($mid) // Get Header info
        {
                if(!$this->marubox)
                        return false;

                $mail_header=imap_header($this->marubox,$mid);
                $sender=$mail_header->from[0];
                $sender_replyto=$mail_header->reply_to[0];
                if(strtolower($sender->mailbox)!='mailer-daemon' && strtolower($sender->mailbox)!='postmaster')
                {
                        $mail_details=array(
                                        'from'=>strtolower($sender->mailbox).'@'.$sender->host,
                                        'fromName'=>$sender->personal,
                                        'toOth'=>strtolower($sender_replyto->mailbox).'@'.$sender_replyto->host,
                                        'toNameOth'=>$sender_replyto->personal,
                                        'subject'=>$mail_header->subject,
                                        'to'=>strtolower($mail_header->toaddress)
                                );
                }
                return $mail_details;
        }
        function get_mime_type(&$structure) //Get Mime type Internal Private Use
        {
                $primary_mime_type = array("TEXT", "MULTIPART", "MESSAGE", "APPLICATION", "AUDIO", "IMAGE", "VIDEO", "OTHER");
               
                if($structure->subtype) {
                        return $primary_mime_type[(int) $structure->type] . '/' . $structure->subtype;
                }
                return "TEXT/PLAIN";
        }
        function get_part($stream, $msg_number, $mime_type, $structure = false, $part_number = false) //Get Part Of Message Internal Private Use
        {
                if(!$structure) {
                        $structure = imap_fetchstructure($stream, $msg_number);
                }
                if($structure) {
                        if($mime_type == $this->get_mime_type($structure))
                        {
                                if(!$part_number)
                                {
                                        $part_number = "1";
                                }
                                $text = imap_fetchbody($stream, $msg_number, $part_number);
                                if($structure->encoding == 3)
                                {
                                        return imap_base64($text);
                                }
                                else if($structure->encoding == 4)
                                {
                                        return imap_qprint($text);
                                }
                                else
                                {
                                        return $text;
                                }
                        }
                        if($structure->type == 1) /* multipart */
                        {
                                while(list($index, $sub_structure) = each($structure->parts))
                                {
                                        if($part_number)
                                        {
                                                $prefix = $part_number . '.';
                                        }
                                        $data = $this->get_part($stream, $msg_number, $mime_type, $sub_structure, $prefix . ($index + 1));
                                        if($data)
                                        {
                                                return $data;
                                        }
                                }
                        }
                }
                return false;
        }
        function getTotalMails() //Get Total Number off Unread Email In Mailbox
        {
                if(!$this->marubox)
                        return false;

                $headers=imap_headers($this->marubox);
                return count($headers);
        }
        function GetAttach($mid,$path) // Get Atteced File from Mail
        {
                if(!$this->marubox)
                        return false;

                $struckture = imap_fetchstructure($this->marubox,$mid);
                $ar="";
                if($struckture->parts)
        {
                        foreach($struckture->parts as $key => $value)
                        {
                                $enc=$struckture->parts[$key]->encoding;
                                if($struckture->parts[$key]->ifdparameters)
                                {
                                        $name=$struckture->parts[$key]->dparameters[0]->value;
                                        $message = imap_fetchbody($this->marubox,$mid,$key+1);
                                        if ($enc == 0)
                                                $message = imap_8bit($message);
                                        if ($enc == 1)
                                                $message = imap_8bit ($message);
                                        if ($enc == 2)
                                                $message = imap_binary ($message);
                                        if ($enc == 3)
                                                $message = imap_base64 ($message);
                                        if ($enc == 4)
                                                $message = quoted_printable_decode($message);
                                        if ($enc == 5)
                                                $message = $message;
                                        $fp=fopen($path.$name,"w");
                                        fwrite($fp,$message);
                                        fclose($fp);
                                        $ar=$ar.$name.",";
                                }
                                // Support for embedded attachments starts here
                                if($struckture->parts[$key]->parts)
                                {
                                        foreach($struckture->parts[$key]->parts as $keyb => $valueb)
                                        {
                                                $enc=$struckture->parts[$key]->parts[$keyb]->encoding;
                                                if($struckture->parts[$key]->parts[$keyb]->ifdparameters)
                                                {
                                                        $name=$struckture->parts[$key]->parts[$keyb]->dparameters[0]->value;
                                                        $partnro = ($key+1).".".($keyb+1);
                                                        $message = imap_fetchbody($this->marubox,$mid,$partnro);
                                                        if ($enc == 0)
                                                                   $message = imap_8bit($message);
                                                        if ($enc == 1)
                                                                   $message = imap_8bit ($message);
                                                        if ($enc == 2)
                                                                   $message = imap_binary ($message);
                                                        if ($enc == 3)
                                                                   $message = imap_base64 ($message);
                                                        if ($enc == 4)
                                                                   $message = quoted_printable_decode($message);
                                                        if ($enc == 5)
                                                                   $message = $message;
                                                        $fp=fopen($path.$name,"w");
                                                        fwrite($fp,$message);
                                                        fclose($fp);
                                                        $ar=$ar.$name.",";
                                                }
                                        }
                                }                              
                        }
                }
                $ar=substr($ar,0,(strlen($ar)-1));
                return $ar;
        }
        function getBody($mid) // Get Message Body
        {
                if(!$this->marubox)
                        return false;

                $body = $this->get_part($this->marubox, $mid, "TEXT/HTML");
                if ($body == "")
                        $body = $this->get_part($this->marubox, $mid, "TEXT/PLAIN");
                if ($body == "") {
                        return "";
                }
                return $body;
        }
        function deleteMails($mid) // Delete That Mail
        {
                if(!$this->marubox)
                        return false;
       
                imap_delete($this->marubox,$mid);
        }
        function close_mailbox() //Close Mail Box
        {
                if(!$this->marubox)
                        return false;

                imap_close($this->marubox,CL_EXPUNGE);
        }
}

function oauth_twitter_ajuste(){

	/*

	// Creating a object of reciveMail Class
	$obj= new receiveMail('ifuyivara@gmail.com','internet21','ifuyivara@gmail.com','imap.googlemail.com','gmail');

	//Connect to the Mail Box
	$obj->connect();         //If connection fails give error message and exit

	// Get Total Number of Unread Email in mail box
	$tot=$obj->getTotalMails(); //Total Mails in Inbox Return integer value

	echo "Total Mails:: $tot<br>";

	for($i=$tot;$i>0;$i--)
	{
	    $head=$obj->getHeaders($i);  // Get Header Info Return Array Of Headers **Array Keys are (subject,to,toOth,toNameOth,from,fromName)
	    echo "Subjects :: ".$head['subject']."<br>";
	    echo "TO :: ".$head['to']."<br>";
	    echo "To Other :: ".$head['toOth']."<br>";
	    echo "ToName Other :: ".$head['toNameOth']."<br>";
	    echo "From :: ".$head['from']."<br>";
	    echo "FromName :: ".$head['fromName']."<br>";
	    echo "<br><br>";
	    echo "<br>*******************************************************************************************<BR>";
	    echo $obj->getBody($i);  // Get Body Of Mail number Return String Get Mail id in interger

	    $str=$obj->GetAttach($i,"./"); // Get attached File from Mail Return name of file in comma separated string  args. (mailid, Path to store file)
	    $ar=explode(",",$str);
	    foreach($ar as $key=>$value)
	        echo ($value=="")?"":"Atteched File :: ".$value."<br>";
	    echo "<br>------------------------------------------------------------------------------------------<BR>";

	    //$obj->deleteMails($i); // Delete Mail from Mail box
	}
	$obj->close_mailbox();   //Close Mail Box
*/
// See this thread for more info: <a href="http://drupal.org/node/92861
//" title="http://drupal.org/node/92861
//" rel="nofollow">http://drupal.org/node/92861
//</a> Display our form
print "<p>Note that it may take several minutes if you are deleting a lot of nodes.</p>";
print drupal_get_form('form_del_all_by_node_type');

}

// Our form for deleteing nodes of given type
function form_del_all_by_node_type() {
  $form['node_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Content Type to delete:'),
    '#description' => t('Enter the type of content to delete. This must be the exact content name used in the database.'),
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Delete now'),
  );
$form['#attributes'] = array(
    'enctype' => 'multipart/form-data',
    'id' => ' form_del_all_by_node_type',
  );
  return $form;
}

// We do no validation
function form_del_all_by_node_type_validate($form_id, $form_values) {
  // left blank
}

// Function to delete all nodes
function form_del_all_by_node_type_submit($form_id, $form_values) {
  $node_type = $form_values['values']['node_type'];
 
  if(user_access('administer nodes')) {
    $aquery = db_query("SELECT n.nid FROM {node} n WHERE n.type = '" . $node_type . "'");
    $deleted_count = 0;
    while ($n = db_fetch_object($aquery)) {
      set_time_limit(5);
      node_delete($n->nid);
      $deleted_count += 1;
    }
    drupal_get_messages();
    drupal_set_message( $deleted_count . ' nodes of type "' . $node_type . '" were found and deleted.');
  }
  else {
    drupal_set_message(t('You do not have permission to perform this operation')); 
  }

}
function oauth_twitter_page(){
	
	include 'includes/EpiCurl.php';
	include 'includes/EpiOAuth.php';
	include 'includes/EpiTwitter.php';
	include 'includes/secret.php';
	
	global $user;
	
	$twitterObj = new EpiTwitter($consumer_key, $consumer_secret);

	$twitterObj->setToken($_GET['oauth_token']);
	$token = $twitterObj->getAccessToken();
	$config=array('token'=>$token->oauth_token,
	              'secret'=>$token->oauth_token_secret);
	
    oauth_twitter_save_config($user->uid,$config);
    $output = "You can now use Grabbit.net to manage your Twitter updates and read your twitter streams";
	return $output;
}

function oauth_twitter_account(){
	include 'includes/EpiCurl.php';
	include 'includes/EpiOAuth.php';
	include 'includes/EpiTwitter.php';
	include 'includes/secret.php';
	
    $twitterObj = new EpiTwitter($consumer_key, $consumer_secret);

    global $user;

    $twitter_account = oauth_twitter_get_uid($user->uid);

    if($twitter_account){
	  $token = unserialize($twitter_account->config);
	  $twitterObj->setToken($token['token'], $token['secret']);
	  $twitterInfo= $twitterObj->get_accountVerify_credentials();
	  $twitterInfo->response;
  	  $output = 'Your current Twitter account for grabbit is: <span class="user-twitter">'.$twitterInfo->screen_name.'</span>
                 <span class="user-pic-twitter"><img src="'.$twitterInfo->profile_image_url.'"></span>';
    }else{
      $output = '<a href="' . $twitterObj->getAuthorizationUrl() . '">Click here to install the Grabbit.net app for Twitter</a>';
    }

	return $output;
}

function oauth_twitter_save_config($user,$config){

  $savetodb = serialize($config);
  if($user>0){
	db_query("DELETE FROM {oauth_twitter} WHERE uid =%d",$user);	
	db_query("INSERT INTO {oauth_twitter} (uid,config) VALUES (%d, '%s')",$user,$savetodb);	
	$result = TRUE;

	  return $result;	
  }
	
}

function oauth_twitter_get_uid($user){

  $result = db_query("SELECT * FROM {oauth_twitter} WHERE uid = %d",$user);

  if ($user = db_fetch_object($result)) {
	$user = $user;
  }
  else{
    $user = FALSE;	
  }

  return $user;
}