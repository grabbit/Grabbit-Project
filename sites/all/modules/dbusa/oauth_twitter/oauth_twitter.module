<?php

/**
 * Implementation of hook_menu()
 */
function oauth_twitter_menu()
{
  $items['confirm/twitter'] = array( 
    'title' => 'Grabbit application has been added', 
    'page callback' => 'oauth_twitter_page', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
 
  $items['application/twitter'] = array( 
    'title' => 'Grabbit application', 
    'page callback' => 'oauth_twitter_authorize', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['application/ajustes'] = array( 
    'title' => 'Grabbit application', 
    'page callback' => 'oauth_twitter_ajuste', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['user/%user_category/edit/twitterapp'] = array(
    'title' => 'Twitter account',
    'page callback' => 'oauth_twitter_account',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'load arguments' => array('%map', '%index'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_user().
 */
function oauth_twitter_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'categories':
      return array(
        array(
          'name' => 'twitterapp',
          'title' => 'Twitter account',
          'weight' => 3,
        ),
      );
  }
}

function oauth_twitter_ajuste(){
global $user;

require_once("../facebook_grabbit/facebook/facebook.php");
require_once("../facebook_grabbit/facebook/facebook_desktop.php");
include("../facebook_grabbit/facebook/config.php");
$app_id='90953553995';

$fuser = facebook_grabbit_get_fid($user->uid);
$suser=$fuser->fid;
$session_key=$fuser->kid;
  
$facebook = new FacebookDesktop($api_key, $secret);
$facebook->set_user($suser, $session_key);
if($timing = grabbit_users_get($user->uid,'facebook_timing')) // get the last time the api was called and retrieve from it
{
  $stream = $facebook->api_client->call_method('facebook.Stream.get', array('session_key' => $session_key,
									           'viewer_id'=>$suser,    
									           'limit'=>"15",
									           'start_time'=>$timing->extra));		      
	
}
else{
  $stream = $facebook->api_client->call_method('facebook.Stream.get', array('session_key' => $session_key,
									       'viewer_id'=>$suser,    
									       'limit'=>"15"));		      
	
}

print_r($stream);

/*
if (!empty($stream['posts'])){
  
  $time=time();
  grabbit_users_save($user->uid,$time,'facebook_timing');
	
  $friends = $stream['profiles'];
  $posts = $stream['posts'];

  foreach($friends as $friend){
	  $profiles[$friend['id']] = $friend; 
  }

  foreach ($posts as $post){
	  $node = new stdClass();
	  $node->title = $profiles[$post['actor_id']]['name'].' - '.$post['created_time'];
	  $node->created = $post['created_time'];
	  $node->type = 'facebook';
	  $node->status = 0;
	  $node->uid = $user->uid;
	  $node->field_text[0]['value'] = $post['message'];
	  $node->field_user[0]['value'] = $post['actor_id'];
	  $node->field_user_name[0]['value'] = $profiles[$post['actor_id']]['name'];
	  $node->field_user_picture[0]['value'] = $profiles[$post['actor_id']]['pic_square'];
	  $node->field_user_url[0]['value'] = $profiles[$post['actor_id']]['url'];
	  $node->field_date[0]['value'] = $post['created_time'];
	  $node->field_post_id[0]['value'] = $post['post_id'];
	  if($post['target_id'])
	    $node->field_target[0]['value'] = $target='&raquo; <a href="'.$profiles[$entry['value']['actor_id']]['url'].'">'.$profiles[$entry['value']['target_id']]['name'].'</a>';
	
	  if($post['attachment'])
	    $node->field_attachment[0]['value']=serialize($post['attachment']);
	
	  $edit->validated = TRUE;
	
	  node_save($node);
	
  }

}
*/
/*
	$mbox = @imap_open(
      "{imap.googlemail.com:993/imap/ssl}INBOX",
      'ifuyivara@gmail.com',
      'internet21',
      OP_READONLY
    );
$messages = array();
$headers = imap_search($mbox, 'ALL', SE_UID);
if (is_array($headers)) {
  $headers = array_reverse($headers, TRUE);
}
foreach ($headers as $k => $v) {
  $messages[$v] = imap_headerinfo($mbox, $k+1);
}
$mc = imap_check($mbox);
$result = imap_fetch_overview($mbox,"1:{$mc->Nmsgs}",0);

foreach ($result as $overview) {
       //check to see if message has been viewed yet
       $seen_msg = $overview->seen;
       //retrieve message number, date, from, subject, uid, seen,
       //and message body from message
        
          echo "<p>{$overview->msgno} ({$overview->date}) - From:
   	  {$overview->from} {$overview->subject}<br>";
    //      echo "UID: {$overview->uid}<br>";
  //        echo "Seen: {$overview->seen}<br>";
          $msgbody = imap_fetchbody($mbox,$overview->msgno,"1");
$data = get_part($mbox, $overview->msgno, "TEXT/HTML");           
//echo "Message: $data <br>";

   
           // end if
       } // end foreach

	imap_close($mbox);
	*/
	//download_file('file',14);
}

function get_mime_type(&$structure) {
    $primary_mime_type = array("TEXT", "MULTIPART", "MESSAGE", "APPLICATION", "AUDIO", "IMAGE", "VIDEO", "OTHER");
    if($structure->subtype) {
         return $primary_mime_type[(int) $structure->type] . '/' . $structure->subtype;
     }
     return "TEXT/PLAIN";
}

function get_part($stream, $msg_number, $mime_type, $structure = false, $part_number = false) {
    if (!$structure) {
         $structure = imap_fetchstructure($stream, $msg_number);
     }
    if($structure) {
	
        $contentParts = count($structure->parts);	
		if ($contentParts >= 2) {
			
			   for ($i=2;$i<=$contentParts;$i++) {
		   	     $file_number=imap_bodystruct($stream,$msg_number,$i);
		         if($file_number->parameters[0]->attribute!='CHARSET')
		           $att[$i-2] =$file_number; 
		   	   }
		     
		   	for ($k=0;$k<sizeof($att);$k++) {
		   		if ($att[$k]->parameters[0]->value == "us-ascii" || $att[$k]->parameters[0]->value    == "US-ASCII") {
		   			if ($att[$k]->parameters[1]->value != "") {
		   				$selectBoxDisplay[$k] = $att[$k]->parameters[1]->value;
		   			}
		   		} elseif ($att[$k]->parameters[0]->value != "iso-8859-1" &&    $att[$k]->parameters[0]->value != "ISO-8859-1") {
		   			$selectBoxDisplay[$k] = $att[$k]->parameters[0]->value;
		   		}
		   	}
		   }
		

		   if (sizeof($selectBoxDisplay) > 0) {
		   	$attachment = "<select name=\"attachments\" size=\"3\" class=\"tblContent\"    onChange=\"handleFile(this.value)\" style=\"width:170;\">";
		   	for ($j=0;$j<sizeof($selectBoxDisplay);$j++) {
		   		$attachment .= "\n<option value=\"$j\">". $selectBoxDisplay[$j]    ."</option>";
		   	}
		   	$attachment .= "</select>";
		   }
	print_r($attachment);
         if($mime_type == get_mime_type($structure)) {
              if(!$part_number) {
                   $part_number = "1";
               }
              $text = imap_fetchbody($stream, $msg_number, $part_number);
              if($structure->encoding == 3) {
                   return imap_base64($text)." ATTACHMENTS: ".$attachment;
               } else if ($structure->encoding == 4) {
                   return utf8_encode(imap_qprint($text))." ATTACHMENTS: ".$attachment;
               } else {
                   return $text." ATTACHMENTS: ".$attachment;
            }
        }
         if ($structure->type == 1) { /* multipart */
              while (list($index, $sub_structure) = each($structure->parts)) {
                if ($part_number) {
                    $prefix = $part_number . '.';
                }
                $data = get_part($stream, $msg_number, $mime_type, $sub_structure, $prefix . ($index + 1));
                if ($data) {
                    return $data;
                }
            }
        }
    }
    return false;
}

function download_file($file,$msgno){
	
	$mbox = @imap_open(
      "{imap.googlemail.com:993/imap/ssl}INBOX",
      'ifuyivara@gmail.com',
      'internet21',
      OP_READONLY
    );
	
	   	$strFileName = 'Anuncio Expo Ferre Indiana alta 5mm.jpg';
	   	$strFileType = strrev(substr(strrev($strFileName),0,4));
	   	$fileContent = imap_fetchbody($mbox,14,$file+2);
	
	   	$ContentType = "application/octet-stream";
        switch($strFileType){
	      case ".asf":
	        $ContentType = "video/x-ms-asf";
	      break;
	      case ".avi":
	        $ContentType = "video/avi";
	      break;
	      case ".doc":
	        $ContentType = "application/msword";
	      break;
	      case ".zip":
	        $ContentType = "application/zip";
	      break;
	      case ".xls":
	        $ContentType = "application/vnd.ms-excel";
	      break;
	      case ".gif":
	        $ContentType = "image/gif";
	      break;
	      case ".jpg":
	      case "jpeg":
	        $ContentType = "image/jpeg";
	      break;
	      case ".wav":
	        $ContentType = "audio/wav";
	      break;
	      case ".mp3":
	   		$ContentType = "audio/mpeg3";
	      break;
	      case ".mpg":
	      case "mpeg":
	        $ContentType = "video/mpeg";
	      break;
	      case ".rtf":
	        $ContentType = "application/rtf";
	      break;
	      case ".htm":
	      case "html":
	        $ContentType = "text/html";
	      break;
	      case ".xml":
	   		$ContentType = "text/xml";
	      break;
	      case ".xsl":
	        $ContentType = "text/xsl";
	      break;
	      case ".css":
	     	$ContentType = "text/css";
	      break;
	      case ".php":
	        $ContentType = "text/php";
	      break;
	      case ".pdf":
	        $ContentType = "application/pdf";
	      break;
        }

		header ("Content-Type: $ContentType"); 
		header("Content-Disposition: attachment; filename=\"" . $strFileName . "\"; size=$fileSize;");
		// Updated oktober 29. 2005
		if (substr($ContentType,0,4) == "text") {
		echo imap_qprint($fileContent);
		} else {
		echo imap_base64($fileContent);
		}

}

function oauth_twitter_page(){
	
	include 'includes/EpiCurl.php';
	include 'includes/EpiOAuth.php';
	include 'includes/EpiTwitter.php';
	include 'includes/secret.php';
	
	global $user;
	
	$twitterObj = new EpiTwitter($consumer_key, $consumer_secret);

	$twitterObj->setToken($_GET['oauth_token']);
	$token = $twitterObj->getAccessToken();
	$config=array('token'=>$token->oauth_token,
	              'secret'=>$token->oauth_token_secret);
	
    oauth_twitter_save_config($user->uid,$config);
    $output = "You can now use Grabbit.net to manage your Twitter updates and read your twitter streams";
	return $output;
}

function oauth_twitter_account(){
	include 'includes/EpiCurl.php';
	include 'includes/EpiOAuth.php';
	include 'includes/EpiTwitter.php';
	include 'includes/secret.php';
	
    $twitterObj = new EpiTwitter($consumer_key, $consumer_secret);

    global $user;

    $twitter_account = oauth_twitter_get_uid($user->uid);

    if($twitter_account){
	  $token = unserialize($twitter_account->config);
	  $twitterObj->setToken($token['token'], $token['secret']);
	  $twitterInfo= $twitterObj->get_accountVerify_credentials();
	  $twitterInfo->response;
  	  $output = 'Your current Twitter account for grabbit is: <span class="user-twitter">'.$twitterInfo->screen_name.'</span>
                 <span class="user-pic-twitter"><img src="'.$twitterInfo->profile_image_url.'"></span>';
    }else{
      $output = '<a href="' . $twitterObj->getAuthorizationUrl() . '">Click here to install the Grabbit.net app for Twitter</a>';
    }

	return $output;
}

function oauth_twitter_save_config($user,$config){

  $savetodb = serialize($config);
  if($user>0){
	db_query("DELETE FROM {oauth_twitter} WHERE uid =%d",$user);	
	db_query("INSERT INTO {oauth_twitter} (uid,config) VALUES (%d, '%s')",$user,$savetodb);	
	$result = TRUE;

	  return $result;	
  }
	
}

function oauth_twitter_get_uid($user){

  $result = db_query("SELECT * FROM {oauth_twitter} WHERE uid = %d",$user);

  if ($user = db_fetch_object($result)) {
	$user = $user;
  }
  else{
    $user = FALSE;	
  }

  return $user;
}