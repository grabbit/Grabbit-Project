<?

/**
 * Implementation of hook_menu()
 */
function grabbit_me_menu() {

  $items['me/activity'] = array( 
    'page callback' => 'grabbit_me_show_activity', 
    'access arguments' => array('access content')
  );

  
  $items['user/%/myfriends/activity'] = array(
   'title' => 'My Activity',
   'description' => t('Watch your activity.'),
   'page callback' => 'grabbit_me_show_activity_rendered',
   'access arguments' => array('access content'),
   	'page arguments' => array(1),
    'load arguments' => array('%map', '%index'),
   'weight' => 13,
   'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function grabbit_me_show_activity(){
	global $user;
	
	print "Statuses: <br><br>";
	grabbit_me_get_statuses($user->uid);
	print "<br><br>Comments: <br><br>";
	grabbit_me_get_comments($user->uid);
	print "<br><br> Mentions: <br><br>";
	grabbit_me_get_mentions($user->uid,$user->name);
	print "<br><br> Number of friends: ".grabbit_me_db_statuses('count', $user->uid, NULL, 1, 'TW_BOTH');
	print "<br><br>Friends added today: ".grabbit_statistics_post_get_friends_today($user->uid);
	print "<br><br>";
	print_r($user);
	
}


function grabbit_me_show_activity_rendered(){
	global $user;
	
	print "this is your activity";
	
}

//Implementation of hook_grabbit_status_update
//$status the text of the status
function grabbit_me_grabbit_status_update($status, $tw_status_ch, $fb_status_ch,$uid){

  $extra_array=array();
  $extra_array['twitter']=$tw_status_ch;
  $extra_array['facebook']=$fb_status_ch;

  $extra_array['status']=$status;

  $extra=serialize($extra_array);

  db_query("INSERT INTO {grabbit_me} (uid,type,extra) VALUES (%d,'status','%s')",$uid,$extra);
	
}

//Implementation of hook_grabbit_facebook_comment
function grabbit_me_grabbit_facebook_comment($nid,$uid,$comment){
	
  $extra_array=array();
  $extra_array['nid']=$nid;
  $extra_array['type']='facebook';
  $extra_array['comment']=$comment;

  $extra=serialize($extra_array);

  db_query("INSERT INTO {grabbit_me} (uid,type,extra) VALUES (%d,'comment','%s')",$uid,$extra);

}

//Implementation of hook_grabbit_nodes_comment
function grabbit_me_grabbit_nodes_comment($nid,$comment,$uid){
	$extra_array=array();
	  $extra_array['nid']=$nid;
	  $extra_array['type']='node';
	  $extra_array['comment']=$comment;

	  $extra=serialize($extra_array);

	  db_query("INSERT INTO {grabbit_me} (uid,type,extra) VALUES (%d,'comment','%s')",$uid,$extra);
	
}

function grabbit_me_get_statuses($uid,$limit=10){
	
  $result = db_query("SELECT extra FROM {grabbit_me} WHERE uid=%d AND type='status' LIMIT %d",$uid,$limit);

  while($updates=db_fetch_object($result)){
    print_r($updates);	
  }
	
}

function grabbit_me_get_comments($uid,$limit=10){
	
  $result = db_query("SELECT extra FROM {grabbit_me} WHERE uid=%d AND type='comment' LIMIT %d",$uid,$limit);

  while($updates=db_fetch_object($result)){
    print_r($updates);	
  }
	
}


function grabbit_me_get_mentions($uid,$user_name,$limit=10){

  if($fuser = facebook_grabbit_get_fid($uid)){
	
      $module_name='facebook_grabbit';
	  require_once(drupal_get_path('module', $module_name)."/facebook/facebook.php");
	  require_once(drupal_get_path('module', $module_name)."/facebook/facebook_desktop.php");
	  include(drupal_get_path('module', $module_name)."/facebook/config.php");

	  $suser=$fuser->fid;
	  $session_key=$fuser->kid;
      try{
	
	    $facebook = new FacebookDesktop($api_key, $secret);
	
	    if ($facebook->set_user($suser, $session_key)!= null){
		  drupal_set_message("Facebook connection failed","error");
		  $facebook_name='1234567876543';
	    }
	    else{
		  $user_details = $facebook->api_client->users_getInfo($suser, 'username');
		  
		  $facebook_name=$user_details[0]['username']; 
		}
	
	  }catch(FacebookRestClientException $e){
		
	  }	
  }
	
  if($twitter_account = oauth_twitter_get_uid($uid)){
	$secret=unserialize($twitter_account->config);
    $user_id=substr($secret['token'], 0, strpos($secret['token'], "-"));    
	$response = drupal_http_request('http://twitter.com/users/show/'.$user_id.'.json');
	$user_twitter=json_decode($response->data);
    $twitter_name=$user_twitter->screen_name;
  }else{
    $twitter_name='2343452345356456756';
  }

  $result = db_query("SELECT * FROM {grabbit_me} WHERE type='status' AND extra LIKE '%".$user_name."%' 
                                                                      OR extra LIKE '%".$facebook_name."%' 
                                                                      OR extra LIKE '%".$twitter_name."%' LIMIT %d",$limit);

  while($updates=db_fetch_object($result)){
	   print_r($updates);	
  }

}

//to get all your friends--> grabbit_me_db_statuses('count', $user->uid, NULL, 1, 'TW_BOTH')

function grabbit_me_db_statuses($op, $requester, $requestee, $rtid, $status) {

  $requester = friendlist_api_user_into_uid($requester);
  $requestee = friendlist_api_user_into_uid($requestee);

  if ($requester !== NULL) {
    $cond  .= ' AND fs.requester_id = %d ';
    $parm[] = $requester;
  }

  if ($requestee !== NULL) {
    $cond  .= ' AND fs.requestee_id = %d ';
    $parm[] = $requestee;
  }

  if ($rtid !== NULL) {
    $cond  .= ' AND fs.rtid = %d ';
    $parm[] = $rtid;
  }

  if ($status != NULL) {

    if (is_array($status)) {

      // Turn the conditions into a query.
      foreach ($status as $status_value) {
        $cond_status[] = "fs.status LIKE '%s'";
        $parm[] = $status_value;
      }
      $cond .= 'AND ('. implode(' OR ', $cond_status) .')' ;

    }
    else {
      $cond  .= " AND fs.status LIKE '%s' ";
      $parm[] = $status;
    }
  }

  if ($op == 'count') {
    $query = "SELECT COUNT(*) FROM {friendlist_statuses} fs JOIN {users} u WHERE u.uid=fs.requestee_id AND u.status = 1 AND 1 = 1 $cond";
    return db_result(db_query($query, $parm));
  }
  else {
    $query = "SELECT * FROM {friendlist_statuses} fs WHERE 1 = 1 $cond";
    return db_query($query, $parm);
  }
}
