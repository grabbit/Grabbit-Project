<?

/**
 * Implementation of hook_menu()
 */
function grabbit_crons_menu() {
  $items['app/delete'] = array( 
    'title' => 'Delete Old Nodes', 
    'page callback' => 'grabbit_crons_delete_nodes', 
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function grabbit_crons_cron() {
  	ini_set("memory_limit","348M");
	ini_set('max_execution_time', 500);
	watchdog("grabbit", "Grabbit cron has started wirh memory: ".ini_get('memory_limit')." and time: ".ini_get("max_execution_time"));
	$now = time();
	
	$last_nid=_get_last_nid();
	
	$result = db_query("SELECT * from {users} where status > 0 AND uid>%d LIMIT 20",$last_nid);
	
	if(db_affected_rows($result)){
	  	while($user = db_fetch_object($result)){
		if(grabbit_crons_cron_time()):
	
			if($fuser = facebook_grabbit_get_fid($user->uid)){
				if (!grabbit_crons_cron_time()){
			      break;
			    }else{
				  facebook_grabbit_update_facebook($user);
			    }
            }

			if($twitter_account = oauth_twitter_get_uid($user->uid)){
			  	if (!grabbit_crons_cron_time()){
			      break;
			    }else{
			      facebook_grabbit_update_twitter($user);
			    }
			}

			if($gmail_user = grabbit_gmail_get($user->uid)){
				if (!grabbit_crons_cron_time()){
			      break;
			    }else{  
			      grabbit_gmail_crear($user->uid);
			    }
			}

			if($imap_user = grabbit_imap_get($user->uid)){
			  	if (!grabbit_crons_cron_time()){
			      break;
			    }else{
			      grabbit_imap_crear($user->uid);
			    }
			}
            
			_save_last_nid($user->uid);
			$last_one=$user->uid;
		  endif;
		}
	}else{
	  $clear=db_query("DELETE from {grabbit_crons}");
	}
	watchdog("grabbit", "Last cron for ".$last_one." has finished");
	
}


/**
 * Check for time limits in cron processing.
 *
 * @return
 *   Number of seconds left, zero if none.
 */
function grabbit_crons_cron_time() {
  static $time_limit;
  if (!$time_limit) {
    $time_limit = time() + ini_get('max_execution_time');
    // However, check for left time, maybe some other cron processing already occured
    $cron_semaphore = variable_get('cron_semaphore', 0);
    if ($cron_semaphore) {
      $time_limit = min($time_limit, $cron_semaphore + ini_get('max_execution_time'));
    }
    timer_start('grabbit_cron');
  }
  return max($time_limit - time(), 0);
}

function _get_last_nid(){
	$result = db_query("SELECT * from {grabbit_crons}");
	$last = db_fetch_object($result);
	return $last->uid;
}

function _save_last_nid($uid){
	$clear= db_query("DELETE from {grabbit_crons}");
	$result = db_query("INSERT INTO {grabbit_crons} SET uid=%d", $uid);
}

function grabbit_crons_delete_nodes(){
	ini_set("memory_limit","348M");
	ini_set('max_execution_time', 500);
	$node_types = array(
	  'facebook', //update this string with the type of node you want to delete
	  'twitter',
	  'gmail',
	  'IMAP' //update this string with the type of node you want to delete and add any more lines you might need
	);
    $count = 0;
    $starttime = mktime()-20*3600*24; 
	
    //$sql = 'SELECT nid FROM {node} WHERE type IN ('. implode(', ', array_fill(0, count($node_types), "'%s'")). ') AND created < '.$starttime.' LIMIT 500';
	    //$result = db_query($sql, $node_types);
	    $result = db_query('SELECT * FROM {grabbit_panels} WHERE uid=1');
	    while ($row = db_fetch_object($result)) {
		print_r($row);
	  //    node_delete($row->nid);
	      $count++;
	      if($count>=1){
		
	        //$result = db_query('DELETE FROM {grabbit_panels} WHERE pan='.$row->pan);
	watchdog("grabbit", "DELET: ".$row->pan);
      }
	    }
	watchdog("grabbit", "FROM: ".date('d, M',$starttime));
	watchdog("grabbit", "Nodes erased: ".$count);
}